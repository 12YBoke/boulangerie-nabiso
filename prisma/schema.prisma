generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String
  salt          String
  createdAt     DateTime        @default(now())
  extensionId   String
  role          Role
  password      String
  accounts      Account[]
  customer      Customer[]
  financialFlow FinancialFlow[]
  orders        Orders[]
  sessions      Session[]
  Stock         Stock[]
  extension     Extension       @relation(fields: [extensionId], references: [id], onDelete: Cascade)

  @@unique([name, extensionId], name: "loginData")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Card {
  id            String        @id @default(cuid())
  cardNumber    Int
  customerId    String
  extensionId   String
  dateCreated   DateTime      @default(now())
  cardStatus    CardStatus    @default(ACTIVE)
  paymentStatus PaymentStatus @default(PENDING)
  customer      Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  extension     Extension     @relation(fields: [extensionId], references: [id], onDelete: Cascade)
  orders        Orders[]

  @@unique([customerId, extensionId, id, cardNumber])
}

model Customer {
  id             String    @id @default(cuid())
  customerNumber Int
  extensionId    String
  name           String
  phoneNumber    String
  createdAt      DateTime  @default(now())
  userId         String
  card           Card[]
  extension      Extension @relation(fields: [extensionId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders         Orders[]

  @@unique([customerNumber, extensionId])
}

model FinancialFlow {
  id            String       @id @default(cuid())
  amount        Float
  reason        String
  agentId       String
  extensionId   String
  date          DateTime
  agentSalaryId String?
  cardPaymentId String?
  flowType      FlowType
  agent         User         @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentSalary   AgentSalary? @relation(fields: [agentSalaryId], references: [id], onDelete: Cascade)
  cardPayment   CardPayment? @relation(fields: [cardPaymentId], references: [id], onDelete: Cascade)
  extension     Extension    @relation(fields: [extensionId], references: [id], onDelete: Cascade)
}

model Stock {
  id            String    @id @default(cuid())
  name          String
  startingStock String
  endingStock   String
  income        String?
  dayProduction String
  date          DateTime
  userId        String
  extensionId   String
  extension     Extension @relation(fields: [extensionId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgentSalary {
  id               String          @id @default(cuid())
  dailySalary      Float?
  missingTotal     Float?
  missingRemoved   Float?
  missingRemaining Float?
  financialFlow    FinancialFlow[]
}

model CardPayment {
  id             String          @id @default(cuid())
  customerNumber Int
  financialFlow  FinancialFlow[]
}

model Deliveries {
  id              String   @id @default(cuid())
  orderId         String
  amountDelivered Float
  dateDelivered   DateTime
  orders          Orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Extension {
  id            String          @id @default(cuid())
  name          String
  rate          Float           @default(27)
  card          Card[]
  customer      Customer[]
  financialFlow FinancialFlow[]
  Stock         Stock[]
  User          User[]
}

model Orders {
  id                  String       @id @default(cuid())
  cardId              String?
  amount              Float?
  amountPaid          Float?
  voucher             Float?
  voucherPaid         Float?
  dateOrdered         DateTime
  CustomerId          String?
  name                String?
  amountToBeDelivered Float?
  userId              String
  type                OrderType    @default(ORDER)
  deliveries          Deliveries[]
  customer            Customer?    @relation(fields: [CustomerId], references: [id], onDelete: Cascade)
  card                Card?        @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum FlowType {
  INCOME
  EXPENSE
}

enum CardStatus {
  ACTIVE
  CLOSED
}

enum PaymentStatus {
  PENDING
  PAID
}

enum Role {
  USER
  ADMIN
}

enum OrderType {
  ORDER
  CASH_SALE
  CHARGE
  DONATION
  DAMAGE
  BURN
}
